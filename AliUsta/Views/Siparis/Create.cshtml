@model AliUsta.Models.SiparisViewModel

@{
    ViewBag.Title = "Yeni Sipariş Oluştur";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <h2>@ViewBag.Title</h2>
    <hr />

    @using (Html.BeginForm("Create", "Siparis", FormMethod.Post, new { @class = "needs-validation", novalidate = "" }))
    {
        @Html.AntiForgeryToken()

        <div class="row g-3">
            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger col-12" })
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger col-12">@TempData["ErrorMessage"]</div>
            }

            <div class="col-md-6">
                @Html.LabelFor(model => model.MusteriID, htmlAttributes: new { @class = "form-label" })
                @Html.DropDownListFor(model => model.MusteriID, Model.MusterilerListesi, "-- Müşteri Seçiniz --", new { @class = "form-select", id = "MusteriID", required = "required", autofocus = "autofocus" })
                @Html.ValidationMessageFor(model => model.MusteriID, "", new { @class = "text-danger d-block" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.AdresID, "Teslimat Adresi", htmlAttributes: new { @class = "form-label" })
                @Html.DropDownListFor(model => model.AdresID, Model.AdreslerListesi, "-- Önce Müşteri Seçiniz --", new { @class = "form-select", id = "AdresID", required = "required" })
                @Html.ValidationMessageFor(model => model.AdresID, "", new { @class = "text-danger d-block" })
            </div>

            <div class="col-md-7">
                @* Genişliği biraz ayarladık *@
                @Html.LabelFor(model => model.UrunID, htmlAttributes: new { @class = "form-label" })
                @Html.DropDownListFor(model => model.UrunID, Model.UrunlerListesi, "-- Ürün Seçiniz --", new { @class = "form-select", id = "UrunID", required = "required" })
                @Html.ValidationMessageFor(model => model.UrunID, "", new { @class = "text-danger d-block" })
            </div>

            <div class="col-md-2">
                @* Genişliği biraz ayarladık *@
                @Html.LabelFor(model => model.Miktar, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.Miktar, new { htmlAttributes = new { @class = "form-control text-end", type = "number", id = "Miktar", min = "1", required = "required" } })
                @Html.ValidationMessageFor(model => model.Miktar, "", new { @class = "text-danger d-block" })
            </div>

            <div class="col-md-3">
                @* İndirim için yeni alan *@
                <label for="IndirimOrani" class="form-label">İndirim Oranı</label>
                <select id="IndirimOrani" class="form-select">
                    <option value="0">İndirim Yok</option>
                    <option value="0.10">%10 İndirim</option>
                    <option value="0.20">%20 İndirim</option>
                    <option value="0.30">%30 İndirim</option>
                </select>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.Tarih, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.Tarih, new { htmlAttributes = new { @class = "form-control", type = "datetime-local", required = "required" } })
                @Html.ValidationMessageFor(model => model.Tarih, "", new { @class = "text-danger d-block" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.Fiyat, "Nihai Fiyat", htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.Fiyat, new { htmlAttributes = new { @class = "form-control text-end", id = "Fiyat", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Fiyat, "", new { @class = "text-danger d-block" })
                <small class="form-text text-muted">Fiyat, ürün, miktar ve indirim seçildiğinde otomatik hesaplanacaktır.</small>
            </div>
        </div>

        @* Usta ve Kurye alanları kaldırıldı *@

        <div class="mt-4">
            <button type="submit" class="btn btn-success">
                <i class="fas fa-cart-plus"></i> Siparişi Oluştur
            </button>
            @Html.ActionLink("Sipariş Listesine Dön", "Index", null, new { @class = "btn btn-secondary" })
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $('#MusteriID').change(function () {
                var musteriId = $(this).val();
                var adresSelect = $('#AdresID');
                adresSelect.empty();
                adresSelect.append($('<option></option>').val('').text('-- Adresler Yükleniyor --'));

                if (musteriId) {
                    $.ajax({
                        url: '@Url.Action("GetAdreslerByMusteri", "Siparis")',
                        type: 'GET',
                        dataType: 'json',
                        data: { musteriId: musteriId },
                        success: function (response) {
                            adresSelect.empty();
                            if (response.success && response.data.length > 0) {
                                adresSelect.append($('<option></option>').val('').text('-- Adres Seçiniz --'));
                                $.each(response.data, function (i, adres) {
                                    adresSelect.append($('<option></option>').val(adres.Value).text(adres.Text));
                                });
                            } else if (response.success && response.data.length === 0) {
                                adresSelect.append($('<option></option>').val('').text('Bu müşteriye ait adres bulunamadı'));
                            }
                            else {
                                adresSelect.append($('<option></option>').val('').text('Adresler yüklenemedi'));
                                console.error("Adres yükleme hatası: ", response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            adresSelect.empty();
                            adresSelect.append($('<option></option>').val('').text('Adresler yüklenirken hata oluştu'));
                            console.error("AJAX Hatası: ", status, error, xhr.responseText);
                        }
                    });
                } else {
                    adresSelect.empty();
                    adresSelect.append($('<option></option>').val('').text('-- Önce Müşteri Seçiniz --'));
                }
            });

            var birimFiyat = 0; // Birim fiyatı saklamak için global değişken

            function calculatePrice() {
                var urunId = $('#UrunID').val();
                var miktar = parseInt($('#Miktar').val());
                var indirimOrani = parseFloat($('#IndirimOrani').val()); // İndirim oranını al

                if (urunId && miktar > 0) {
                    // Birim fiyatı sadece ürün değiştiğinde veya ilk başta çek
                    if (birimFiyat === 0 || $('#UrunID').data('last-urunid') !== urunId) {
                        $('#UrunID').data('last-urunid', urunId); // Son çekilen ürün ID'sini sakla
                        $.ajax({
                            url: '@Url.Action("GetUrunFiyati", "Siparis")',
                            type: 'GET',
                            dataType: 'json',
                            data: { urunId: urunId },
                            async: false, // Fiyatı hemen alıp kullanmak için senkronize yapabiliriz (önerilmez ama basitlik için)
                                         // Daha iyi bir yol callback içinde devam etmek veya Promise kullanmaktır.
                                         // Şimdilik birimFiyat'ı global değişkende tutup, success içinde güncelleyeceğiz.
                            success: function (data) {
                                if (data.fiyat) {
                                    birimFiyat = parseFloat(data.fiyat);
                                    var hamFiyat = birimFiyat * miktar;
                                    var indirimMiktari = hamFiyat * indirimOrani;
                                    var nihaiFiyat = hamFiyat - indirimMiktari;
                                    $('#Fiyat').val(nihaiFiyat.toFixed(2));
                                } else {
                                    birimFiyat = 0;
                                    $('#Fiyat').val('0.00');
                                }
                            },
                            error: function () {
                                birimFiyat = 0;
                                $('#Fiyat').val('Hata!');
                                console.error("Fiyat alınırken hata oluştu.");
                            }
                        });
                    } else {
                        // Birim fiyat zaten varsa, sadece miktar ve indirimle yeniden hesapla
                        var hamFiyat = birimFiyat * miktar;
                        var indirimMiktari = hamFiyat * indirimOrani;
                        var nihaiFiyat = hamFiyat - indirimMiktari;
                        $('#Fiyat').val(nihaiFiyat.toFixed(2));
                    }
                } else {
                    birimFiyat = 0; // Ürün seçilmemişse birim fiyatı sıfırla
                    $('#Fiyat').val('0.00');
                }
            }

            $('#UrunID').change(function() {
                birimFiyat = 0; // Ürün değiştiğinde birim fiyatı sıfırla ki yeniden çekilsin
                calculatePrice();
            });
            $('#Miktar').on('change keyup', calculatePrice); // Hem değiştiğinde hem yazarken
            $('#IndirimOrani').change(calculatePrice); // İndirim oranı değiştiğinde


            (function () {
                'use strict'
                var forms = document.querySelectorAll('.needs-validation')
                Array.prototype.slice.call(forms)
                    .forEach(function (form) {
                        form.addEventListener('submit', function (event) {
                            if (!form.checkValidity()) {
                                event.preventDefault()
                                event.stopPropagation()
                            }
                            form.classList.add('was-validated')
                        }, false)
                    })
            })();

            if ($('#MusteriID').val()) {
                $('#MusteriID').trigger('change');
            }
            if ($('#UrunID').val() && $('#Miktar').val() > 0) {
                calculatePrice(); // Sayfa yüklendiğinde ilk fiyat hesaplaması
            }
        });
    </script>
}